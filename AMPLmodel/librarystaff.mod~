# Model file
# Master Thesis: Work Distribution of a Heterogeneous Library Staff - A Personnel Task Scheduling Problem
# Master Students: Claes Arvidson and Emelie Karlsson
# First version: 2016-02-09

#################################### Sets ########################################################################
set D; #Set of days in a week
set W; #Set of weeks
set I; #Set of staff
set S{D}; #Set of outer shifts in a day, either weekday or weekend day
set J{D}; #Set of total outer task types at a day D
#set I_qualified{J}; #Set of qualified workers for task type J
set I_weekend_avail; #Set of workers available for weekend work. Subset of I
#set I_weekend{W}; #Set of workers available on weekend w. Subset of I_weekend_avail
set I_lib; #Set of librarians
set I_ass; #Set of assistants
set V; #Set of possible week rotations (shift the week by 1..5 steps)

set Shifts;


#################################### Parameters ########################################################################
param skill{I} binary; #Staff skill competence for worker i, 0 if Assistant or 1 if Librarian
param avail{i in I, w in W, d in D, s in S[d]} binary; #Worker i available for shift s day d week w
param task_worker_demand{d in D, s in S[d], j in J[d]} integer; #number of workers required for task type j shift s on day d
param qualavail{i in I,w in W, d in D, s in S[d], j in J[d]} binary; #Worker i qualified and available for task type j shift s day d week w
#param meeting{S{D},D,W} binary;
#param inner{I,D,W} binary; #saying if worker i has inner service day d week w

param Shift_list{Shifts};
param N := 1; #The bigger, the more priority to maximize stand-ins

#################################### Variables ########################################################################
var r{i in I, w in W} binary; #1 if person i has a rotation (phase shift) of w weeks, 0 otherwise
var h{i in I, w in W} binary; #1 if worker i works weekend in week w
var x{i in I, w in W, d in D, s in S[d], j in J[d]} binary; #1 if worker i is assigned task type j in shift s day d week w
var z{i in I_weekend_avail, w in W, d in D, s in S[d], j in J[d]} binary; #1 if x = 1 and h = 1, 0 else
var stand_in{i in I, w in W, d in D, s in S[d], j in J[d]} binary; #1 if (h[i,v]*qualavail[i,(w-v+5) mod 5 +1,d,s,j]) = 1 and x[i,w,d,s,j] = 0. First term is if a worker is working a weekend
var y{i in I, w in W, d in 1..5, s in 1..3} binary; #1 if worker i works week w, day d, shift s. No weekends and no evenings
var lowest_stand_in_amount integer; # Lowest number of stand-in workers at any shift
var shifts_that_differ_between_weeks{i in I, w in W, w_prime in W, d in 1..5, s in 1..3} binary; #Shift that differ between different weeks for a worker at a certain shift
var hb{i in I, w in W} binary; #1 if a person i works in HB week w
var working_friday{i in I, w in W} binary; #1 if a person works weekend but not in HB





################################## Objective function ###################################################################

maximize objective: #Maximize stand-ins and create schedules with similar weeks for each worker
	N*lowest_stand_in_amount - sum{i in I}(sum{w in 1..4}(sum{w_prime in (w+1)..5}(sum{d in 1..5}(sum{s in 1..3} shifts_that_differ_between_weeks[i,w,w_prime,d,s]))));



#################################### Constraints ########################################################################

######################## Task demand for workers #####################################
#number of workers to be assigned to different task types at different shifts (shall work for all days 1..7)
subject to task_assign_amount{w in W, d in D,s in S[d], j in J[d]}:
	sum{i in I} x[i,w,d,s,j] = task_worker_demand[d,s,j];

######################## Maximum one task per day #####################################
#Stating that a worker can only be assigned one (outer) task per day (weekends included) where they are available
subject to max_one_task_per_day{i in I, w in W, d in D}:
	sum{s in S[d]}(sum {j in J[d]} x[i,w,d,s,j]) <= 1;

####################### Week rotation and weekend constraints #########################
#Stating number of weeks worker i:s schedule is phase shifted
subject to rotation_of_week{i in I}:
	sum{w in W} r[i,w] = 1;

#Allowing a "weekend-worker" to work one weekend per five weeks at most
subject to one_weekend_per_five_weeks{i in I_weekend_avail}:
	sum{w in W} h[i,w] <= 1;

#Rotate the schedule so weekend work is at week w. If worker i does not work weekend (h = 0) then the rotation is free.
subject to rotation_demand{i in I, w in W}:
	r[i,w] >= h[i,w];

#Add friday to objective function ??
#Ensuring that if a worker i is working weekend w then they will work saturday and sunday in week w
subject to three_days_weekends{i in I_weekend_avail, w in W}:
	sum {s in S[6]}(sum {j in J[6]} x[i,w,6,s,j]) + sum {s in S[7]}(sum {j in J[7]} x[i,w,7,s,j]) = 2*h[i,w];  #+ sum {j in J[5]} x[i,w,5,4,j] = 3*h[i,w];

subject to same_tasks_on_weekends{i in I_weekend_avail, w in W, j in J[7]} :
	sum{s in S[6]} x[i,w,6,s,j] = sum{s in S[6]} x[i,w,7,s,j];


######################### Friday constraints #################################
#assigns hb to 1 if a worker is working in HB on saturday (and sunday)
subject to assign_hb{i in I_weekend_avail, w in W}:
	hb[i,w] = x[i,w,6,1,'HB'];

#subject to friday_added_to_the_weekend{i in I_weekend_avail, w in W}:
#	sum {j in J[5]} x[i,w,5,4,j] = working_friday[i,w];

#Help constraints. working_friday = 1 if worker i works weekend w, but does not work in HB
subject to help_constraint_friday_1{i in I_weekend_avail, w in W}:
	working_friday[i,w] >= h[i,w] + (1 - hb[i,w]) - 1;

subject to help_constraint_friday_2{i in I_weekend_avail, w in W}:
	working_friday[i,w] <= h[i,w];

subject to help_constraint_friday_3{i in I_weekend_avail, w in W}:
	working_friday[i,w] <= (1 - hb[i,w]);





######################### Stand-in constraints #################################
#Finding the lowest stand-in amount of all shifts and at a specific task type where weekends, big meetings and evening shifts are discarded
subject to find_lowest_stand_in_amount_no_weekends_no_evenings{w in W, d in 1..5, s in 1..3, j in {'Exp','Info'}}: #RHS: number of qualified workers at work that is available & not assigned to any task.
	lowest_stand_in_amount <= sum{i in I} stand_in[i,w,d,s,j]; 		#+ meeting[s,d,w]*M; 

#A worker is a stand in if he/she is available, qualified and is not already scheduled. Takes schedule rotation into account
subject to find_qualavail_not_working{i in I, w in W, d in D, s in S[d], j in J[d]}:
	stand_in[i,w,d,s,j] >= sum {v in V} (r[i,v]*qualavail[i,(w-v+5) mod 5 +1,d,s,j]) + (1-x[i,w,d,s,j]) - 1; #Qualified, available and not working a shift

### Help constraints for qualavail and not scheduled ###
subject to help_constraint2{i in I, w in W, d in D, s in S[d], j in J[d]}:
	stand_in[i,w,d,s,j] <= sum {v in V} (r[i,v]*qualavail[i,(w-v+5) mod 5 +1,d,s,j]);

subject to help_constraint3{i in I, w in W, d in D, s in S[d], j in J[d]}:
	stand_in[i,w,d,s,j] <= (1-x[i,w,d,s,j]);

####################### Only assign if qualified and available ######################

subject to librarians_only_assigned_if_qualavail_weekdays{i in I_lib, w in W, d in 1..5, s in S[d], j in J[d]}: #librarians qualified for all: 'Exp', 'Info', 'PL', 'HB'
	x[i,w,d,s,j] <= (sum {v in V} (r[i,v]*qualavail[i,(w-v+5) mod 5 +1,d,s,j]));

subject to librarians_only_assigned_if_qualavail_weekends{i in I_lib, w in W, d in 6..7, s in S[d], j in J[d]}: #librarians qualified for all: 'Exp', 'Info', 'PL', 'HB'
	x[i,w,d,s,j] <= (sum {v in V} (r[i,v]*qualavail[i,(w-v+5) mod 5 +1,d,s,j]));

subject to assistants_only_assigned_if_qualavail_weekdays{i in I_ass, w in W, d in 1..5, s in S[d], j in J[d]}: #assistants not qualified for 'Info' on weekdays
	x[i,w,d,s,j] <= (sum {v in V} (r[i,v]*qualavail[i,(w-v+5) mod 5 +1,d,s,j]));

subject to assistants_only_assigned_if_qualavail_weekends{i in I_ass, w in W, d in 6..7, s in S[d], j in J[d]}: #assistants not qualified for 'Info' or 'HB' on weekends
	x[i,w,d,s,j] <= (sum {v in V} (r[i,v]*qualavail[i,(w-v+5) mod 5 +1,d,s,j]));

############### Second objective function constraints: Similar weeks for workers #############
subject to positive_values_of_abs{i in I, w in 1..4, w_prime in (w+1)..5, d in 1..5, s in 1..3}:
	shifts_that_differ_between_weeks[i,w,w_prime,d,s] >= (y[i,w,d,s]-y[i,w_prime,d,s]);

subject to negative_values_of_abs{i in I, w in 1..4, w_prime in (w+1)..5, d in 1..5, s in 1..3}:
	shifts_that_differ_between_weeks[i,w,w_prime,d,s] >= -(y[i,w,d,s]-y[i,w_prime,d,s]);
##############################################################################################


#############################################

### Visualizing and modeling ###
#Variable saying if a worker i is assigned a shift s
subject to assign_y{i in I, w in W, d in 1..5, s in 1..3}:
	y[i,w,d,s] = sum{j in J[d]} x[i,w,d,s,j];
################################


